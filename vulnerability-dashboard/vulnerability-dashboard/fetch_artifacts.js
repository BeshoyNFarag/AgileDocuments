// Node.js script to fetch GitLab pipeline artifacts
// Run this script on a machine within your internal network that can access your GitLab instance.

const axios = require("axios");
const fs = require("fs");
const path = require("path");
const AdmZip = require("adm-zip");

// --- GitLab Configuration (PLACEHOLDERS) ---
// Replace with your actual GitLab instance URL, private token, and project IDs
const GITLAB_URL = "https://lv-gitlab.intern.th-ab.de";
const PRIVATE_TOKEN = "xRpjwyqZfW4YeaEUTsta"; // Replace with your actual token

const PROJECTS = {
    "juiceshop": "YOUR_JUICESHOP_PROJECT_ID_OR_PATH", // e.g., 12345 or "agilesec2025/team14/juiceshop"
    "todoapp": "1984" // e.g., 67890 or "your-group/todoapp"
};

// Define the types of artifacts to fetch and their corresponding report filenames
const ARTIFACT_TYPES = {
    "SAST": "gl-sast-report.json",
    // Added Secret Detection for juiceshop as requested
    "Secret Detection": "gl-secret-detection-report.json", 
    "Dependency check": "gl-dependency-scanning-report.json", // Common name, adjust if your pipeline uses a different one
    "Container scanning": "gl-container-scanning-report.json", // Common name, adjust if your pipeline uses a different one
    "Fuzzing": "gl-fuzzing-report.json", // Common name, adjust if your pipeline uses a different one
    "DAST": "gl-dast-report.json" // Common name, adjust if your pipeline uses a different one
};

const ARTIFACTS_DIR = "./artifacts"; // Directory to store downloaded and extracted artifacts

async function fetchArtifacts() {
    // Create the artifacts directory if it doesn_t exist
    if (!fs.existsSync(ARTIFACTS_DIR)) {
        fs.mkdirSync(ARTIFACTS_DIR, { recursive: true });
        console.log(`Created artifacts directory: ${ARTIFACTS_DIR}`)
    }

    // Loop through each project defined in the PROJECTS object
    for (const projectName in PROJECTS) {
        const projectIdOrPath = PROJECTS[projectName];
        console.log(`\nProcessing project: ${projectName} (ID/Path: ${projectIdOrPath})`);

        try {
            // 1. Resolve Project Path to Project ID if a path is provided
            let projectId = projectIdOrPath;
            if (isNaN(projectIdOrPath)) { // Check if the provided ID/Path is not a number (i.e., it_s a path)
                console.log(`  Project identifier "${projectIdOrPath}" is a path. Resolving to ID...`);
                const projectResponse = await axios.get(
                    `${GITLAB_URL}/api/v4/projects/${encodeURIComponent(projectIdOrPath)}`,
                    { headers: { "PRIVATE-TOKEN": PRIVATE_TOKEN } }
                );
                projectId = projectResponse.data.id;
                console.log(`  Resolved project path "${projectIdOrPath}" to ID: ${projectId}`);
            } else {
                console.log(`  Using provided project ID: ${projectId}`);
            }

            // 2. Get the latest successful pipeline for the project
            console.log(`  Fetching latest successful pipeline for project ID: ${projectId}...`);
            const pipelinesResponse = await axios.get(
                `${GITLAB_URL}/api/v4/projects/${projectId}/pipelines`,
                { 
                    headers: { "PRIVATE-TOKEN": PRIVATE_TOKEN },
                    // Parameters to filter for the latest successful pipeline
                    params: { status: "success", order_by: "id", sort: "desc", per_page: 1 }
                }
            );

            if (pipelinesResponse.data.length === 0) {
                console.log(`  No successful pipelines found for ${projectName}. Skipping this project.`);
                continue; // Move to the next project
            }
            const latestPipeline = pipelinesResponse.data[0];
            console.log(`  Found latest successful pipeline ID: ${latestPipeline.id} (SHA: ${latestPipeline.sha})`);

            // 3. Get all jobs for the latest successful pipeline
            console.log(`  Fetching jobs for pipeline ID: ${latestPipeline.id}...`);
            const jobsResponse = await axios.get(
                `${GITLAB_URL}/api/v4/projects/${projectId}/pipelines/${latestPipeline.id}/jobs`,
                { headers: { "PRIVATE-TOKEN": PRIVATE_TOKEN }, params: { per_page: 100 } } // Get up to 100 jobs
            );
            const jobs = jobsResponse.data;
            console.log(`  Found ${jobs.length} jobs in the pipeline.`);

            // 4. Iterate through defined artifact types and attempt to download and extract them
            for (const stageName in ARTIFACT_TYPES) {
                const artifactFileNameToExtract = ARTIFACT_TYPES[stageName];
                console.log(`    Looking for ${stageName} artifact (expects filename: ${artifactFileNameToExtract})...`);

                // Attempt to find a relevant job for the current stage/artifact type.
                // This logic might need refinement based on your specific job naming conventions.
                // It currently looks for a successful job with artifacts whose name includes the first word of the stageName.
                const relevantJob = jobs.find(job => 
                    job.status === "success" && 
                    job.artifacts_file && // Check if the job has an artifacts file
                    // Basic job name matching: e.g., "SAST" stage matches jobs named "sast_job", "run_sast", etc.
                    // For "Secret Detection", it will look for jobs containing "secret".
                    job.name.toLowerCase().includes(stageName.toLowerCase().split(" ")[0]) 
                );

                if (relevantJob) {
                    console.log(`      Found potentially relevant job: "${relevantJob.name}" (ID: ${relevantJob.id}) for stage "${stageName}"`);
                    const artifactDownloadUrl = 
                        `${GITLAB_URL}/api/v4/projects/${projectId}/jobs/${relevantJob.id}/artifacts`;
                    
                    console.log(`      Downloading artifacts zip from: ${artifactDownloadUrl}`);
                    const response = await axios.get(artifactDownloadUrl, {
                        headers: { "PRIVATE-TOKEN": PRIVATE_TOKEN },
                        responseType: "arraybuffer" // Important for downloading binary data like a zip file
                    });

                    // Temporarily save the downloaded zip file
                    const tempZipFileName = `${projectName}_${stageName.replace(/ /g, "_")}_temp_artifacts.zip`;
                    const tempZipFilePath = path.join(ARTIFACTS_DIR, tempZipFileName);
                    fs.writeFileSync(tempZipFilePath, response.data);
                    console.log(`      Downloaded artifacts zip to temporary file: ${tempZipFilePath}`);

                    // Attempt to extract the specific artifact file from the zip
                    try {
                        const zip = new AdmZip(tempZipFilePath);
                        const zipEntries = zip.getEntries();
                        const targetEntry = zipEntries.find(entry => entry.entryName === artifactFileNameToExtract);

                        if (targetEntry) {
                            // Define the path for the extracted JSON file, following dashboard naming convention
                            const outputFileName = `${projectName}_${stageName.replace(/ /g, "_")}.json`;
                            const extractedFilePath = path.join(ARTIFACTS_DIR, outputFileName);
                            fs.writeFileSync(extractedFilePath, zip.readAsText(targetEntry));
                            console.log(`      Successfully extracted "${artifactFileNameToExtract}" to "${extractedFilePath}"`);
                        } else {
                            console.log(`      WARNING: "${artifactFileNameToExtract}" not found inside the artifacts zip for job "${relevantJob.name}". Searched ${zipEntries.length} entries.`);
                        }
                    } catch (zipError) {
                        console.error(`      ERROR: Failed to process zip file ${tempZipFilePath}. Error: ${zipError.message}`);
                    }
                    
                    fs.unlinkSync(tempZipFilePath); // Clean up the temporary zip file

                } else {
                    console.log(`      No successful job found for stage "${stageName}" that matches criteria and has artifacts.`);
                }
            }

        } catch (error) {
            console.error(`  ERROR processing project ${projectName}: ${error.message}`);
            if (error.response) {
                // Log more detailed error information if it_s a GitLab API error
                console.error(`    GitLab API Error Status: ${error.response.status}`);
                console.error(`    GitLab API Error Data: ${JSON.stringify(error.response.data, null, 2)}`);
            }
        }
    }
    console.log("\nArtifact fetching process completed.");
}

// Execute the main function to start fetching artifacts
fetchArtifacts();


