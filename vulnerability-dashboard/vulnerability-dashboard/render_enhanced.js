// Enhanced render.js with artifact data integration
import { getData, readFile_JSON, writeFile_JSON } from './utils_enhanced.js';

//GLOBAL VAR//
//page enum
const BASE_PAGE = 0;
const CONFIG_PAGE = 1;
const OVERVIEW_PAGE = 2;
const SAST_PAGE = 3;
const D_CHECK_PAGE = 4;
const CONT_SCAN_PAGE = 5;
const FUZZING_PAGE = 6;
const DAST_PAGE = 7;
const LASTPVUL_PAGE = 8;
let currentPage = BASE_PAGE;

const SETTINGS_PATH = "./VDsettings.json";
const BTN_ALLOWED = "btn-not-allowed";
const BTN_NOT_ALLOWED = "btn-allowed";
const BTN_ALLOWED_ACTIVE = "btn-allowed-active";

// Mock data structure for demonstration - replace with actual artifact data
const mockArtifactData = {
    juiceshop: {
        sast: {
            vulnerabilities: [
                { severity: "HIGH", type: "SQL Injection", file: "app.js", line: 42, description: "Potential SQL injection vulnerability" },
                { severity: "MEDIUM", type: "XSS", file: "login.html", line: 15, description: "Cross-site scripting vulnerability" },
                { severity: "LOW", type: "Hardcoded Secret", file: "config.js", line: 8, description: "Hardcoded API key found" }
            ],
            summary: { high: 1, medium: 1, low: 1, total: 3 }
        },
        dast: {
            vulnerabilities: [
                { severity: "HIGH", type: "Authentication Bypass", url: "/admin", description: "Admin panel accessible without authentication" },
                { severity: "MEDIUM", type: "Information Disclosure", url: "/api/users", description: "Sensitive user data exposed" }
            ],
            summary: { high: 1, medium: 1, low: 0, total: 2 }
        },
        dependency_scanning: {
            vulnerabilities: [
                { severity: "HIGH", package: "lodash", version: "4.17.15", cve: "CVE-2020-8203", description: "Prototype pollution vulnerability" },
                { severity: "MEDIUM", package: "express", version: "4.16.4", cve: "CVE-2019-5413", description: "Open redirect vulnerability" }
            ],
            summary: { high: 1, medium: 1, low: 0, total: 2 }
        },
        container_scanning: {
            vulnerabilities: [
                { severity: "HIGH", package: "openssl", version: "1.1.1", cve: "CVE-2021-3711", description: "Buffer overflow in SM2 decryption" }
            ],
            summary: { high: 1, medium: 0, low: 0, total: 1 }
        },
        fuzzing: {
            vulnerabilities: [
                { severity: "MEDIUM", endpoint: "/api/search", description: "Input validation bypass detected" }
            ],
            summary: { high: 0, medium: 1, low: 0, total: 1 }
        }
    },
    todoapp: {
        sast: {
            vulnerabilities: [
                { severity: "MEDIUM", type: "Path Traversal", file: "fileHandler.js", line: 23, description: "Potential path traversal vulnerability" }
            ],
            summary: { high: 0, medium: 1, low: 0, total: 1 }
        },
        dast: {
            vulnerabilities: [
                { severity: "LOW", type: "Missing Security Headers", url: "/", description: "Missing X-Frame-Options header" }
            ],
            summary: { high: 0, medium: 0, low: 1, total: 1 }
        },
        dependency_scanning: {
            vulnerabilities: [],
            summary: { high: 0, medium: 0, low: 0, total: 0 }
        },
        container_scanning: {
            vulnerabilities: [],
            summary: { high: 0, medium: 0, low: 0, total: 0 }
        },
        fuzzing: {
            vulnerabilities: [],
            summary: { high: 0, medium: 0, low: 0, total: 0 }
        }
    }
};

//Get buttons
const btnOverview = document.getElementById("overview");
const btnSast = document.getElementById("sast");
const btnDCheck = document.getElementById("dependenncy-check");
const btnContainerScanning = document.getElementById("container-scanning");
const btnFuzzing = document.getElementById("fuzzing");
const btnDast = document.getElementById("dast");
const btnLastPVul = document.getElementById("last-pipeline-vul");
const btnPreVul = document.getElementById("pre-vul");
const btnChConfig = document.getElementById("change-config");

// Utility functions
function createErrorPage(errorMsg) {
    const main = document.querySelector("main");
    const h1 = document.createElement("h1");
    h1.innerText = errorMsg;
    h1.style.textAlign = "center";
    main.appendChild(h1);
}

function removeCurrentPage() {
    const root = document.querySelector("main");
    while (root.firstChild) {
        root.removeChild(root.firstChild);
    }
}

function disableReportBtns(disableBtn) {
    const reportBtns = document.querySelectorAll(".reportBtn");
    
    if(reportBtns[0].disabled === disableBtn) 
        return;

    for(const btn of reportBtns) {
        btn.disabled = disableBtn;
        btn.classList.toggle(BTN_ALLOWED);
        btn.classList.toggle(BTN_NOT_ALLOWED);
    }
}

function removeSelector(selector, type = "", ...exceptions) {
    const nodesArray = document.querySelectorAll(type + selector);
    for(const node of nodesArray) {
        if(!exceptions.includes(node))
            node.classList.remove(selector);
    }
}

function createProjectSelector() {
    const selector = document.createElement("div");
    selector.className = "project-selector";
    selector.innerHTML = `
        <h3>Select Project:</h3>
        <div class="project-buttons">
            <button class="project-btn active" data-project="juiceshop">JuiceShop</button>
            <button class="project-btn" data-project="todoapp">TodoApp</button>
        </div>
    `;
    
    // Add event listeners for project selection
    selector.querySelectorAll('.project-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            selector.querySelectorAll('.project-btn').forEach(b => b.classList.remove('active'));
            e.target.classList.add('active');
            // Trigger page refresh with new project data
            const currentPageType = getCurrentPageType();
            if (currentPageType !== 'overview') {
                refreshCurrentPage();
            }
        });
    });
    
    return selector;
}

function getCurrentProject() {
    const activeBtn = document.querySelector('.project-btn.active');
    return activeBtn ? activeBtn.dataset.project : 'juiceshop';
}

function getCurrentPageType() {
    if (currentPage === SAST_PAGE) return 'sast';
    if (currentPage === DAST_PAGE) return 'dast';
    if (currentPage === D_CHECK_PAGE) return 'dependency_scanning';
    if (currentPage === CONT_SCAN_PAGE) return 'container_scanning';
    if (currentPage === FUZZING_PAGE) return 'fuzzing';
    return 'overview';
}

function refreshCurrentPage() {
    const pageType = getCurrentPageType();
    const main = document.querySelector("main");
    
    // Remove content but keep project selector
    const selector = main.querySelector('.project-selector');
    removeCurrentPage();
    if (selector) main.appendChild(selector);
    
    // Recreate page content
    switch(pageType) {
        case 'sast':
            createSastReportPage(main);
            break;
        case 'dast':
            createDastReportPage(main);
            break;
        case 'dependency_scanning':
            createDCheckReportPage(main);
            break;
        case 'container_scanning':
            createContScanReportPage(main);
            break;
        case 'fuzzing':
            createFuzzingReportPage(main);
            break;
    }
}

function createVulnerabilityTable(vulnerabilities, type) {
    if (!vulnerabilities || vulnerabilities.length === 0) {
        return `<p class="no-vulnerabilities">No ${type} vulnerabilities found.</p>`;
    }

    let tableHTML = `
        <table class="vulnerability-table">
            <thead>
                <tr>
                    <th>Severity</th>
                    <th>Type/CVE</th>
                    <th>Location</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
    `;

    vulnerabilities.forEach(vuln => {
        const location = vuln.file ? `${vuln.file}:${vuln.line}` : 
                        vuln.url ? vuln.url : 
                        vuln.package ? `${vuln.package} (${vuln.version})` :
                        vuln.endpoint ? vuln.endpoint : 'N/A';
        
        const typeInfo = vuln.type || vuln.cve || 'Unknown';
        
        tableHTML += `
            <tr class="severity-${vuln.severity.toLowerCase()}">
                <td><span class="severity-badge ${vuln.severity.toLowerCase()}">${vuln.severity}</span></td>
                <td>${typeInfo}</td>
                <td>${location}</td>
                <td>${vuln.description}</td>
            </tr>
        `;
    });

    tableHTML += `
            </tbody>
        </table>
    `;

    return tableHTML;
}

function createSummaryCards(summary) {
    return `
        <div class="summary-cards">
            <div class="summary-card high">
                <h4>High</h4>
                <span class="count">${summary.high}</span>
            </div>
            <div class="summary-card medium">
                <h4>Medium</h4>
                <span class="count">${summary.medium}</span>
            </div>
            <div class="summary-card low">
                <h4>Low</h4>
                <span class="count">${summary.low}</span>
            </div>
            <div class="summary-card total">
                <h4>Total</h4>
                <span class="count">${summary.total}</span>
            </div>
        </div>
    `;
}

function createSastReportPage(parentContainer) {
    const project = getCurrentProject();
    const data = mockArtifactData[project].sast;
    
    if (!parentContainer.querySelector('.project-selector')) {
        parentContainer.appendChild(createProjectSelector());
    }
    
    const content = document.createElement("div");
    content.className = "report-content";
    content.innerHTML = `
        <h2>SAST Report - ${project.toUpperCase()}</h2>
        ${createSummaryCards(data.summary)}
        <div class="vulnerabilities-section">
            <h3>Vulnerabilities Found</h3>
            ${createVulnerabilityTable(data.vulnerabilities, 'SAST')}
        </div>
    `;
    
    parentContainer.appendChild(content);
}

function createDastReportPage(parentContainer) {
    const project = getCurrentProject();
    const data = mockArtifactData[project].dast;
    
    if (!parentContainer.querySelector('.project-selector')) {
        parentContainer.appendChild(createProjectSelector());
    }
    
    const content = document.createElement("div");
    content.className = "report-content";
    content.innerHTML = `
        <h2>DAST Report - ${project.toUpperCase()}</h2>
        ${createSummaryCards(data.summary)}
        <div class="vulnerabilities-section">
            <h3>Vulnerabilities Found</h3>
            ${createVulnerabilityTable(data.vulnerabilities, 'DAST')}
        </div>
    `;
    
    parentContainer.appendChild(content);
}

function createFuzzingReportPage(parentContainer) {
    const project = getCurrentProject();
    const data = mockArtifactData[project].fuzzing;
    
    if (!parentContainer.querySelector('.project-selector')) {
        parentContainer.appendChild(createProjectSelector());
    }
    
    const content = document.createElement("div");
    content.className = "report-content";
    content.innerHTML = `
        <h2>Fuzzing Report - ${project.toUpperCase()}</h2>
        ${createSummaryCards(data.summary)}
        <div class="vulnerabilities-section">
            <h3>Vulnerabilities Found</h3>
            ${createVulnerabilityTable(data.vulnerabilities, 'Fuzzing')}
        </div>
    `;
    
    parentContainer.appendChild(content);
}

function createContScanReportPage(parentContainer) {
    const project = getCurrentProject();
    const data = mockArtifactData[project].container_scanning;
    
    if (!parentContainer.querySelector('.project-selector')) {
        parentContainer.appendChild(createProjectSelector());
    }
    
    const content = document.createElement("div");
    content.className = "report-content";
    content.innerHTML = `
        <h2>Container Scanning Report - ${project.toUpperCase()}</h2>
        ${createSummaryCards(data.summary)}
        <div class="vulnerabilities-section">
            <h3>Vulnerabilities Found</h3>
            ${createVulnerabilityTable(data.vulnerabilities, 'Container Scanning')}
        </div>
    `;
    
    parentContainer.appendChild(content);
}

function createDCheckReportPage(parentContainer) {
    const project = getCurrentProject();
    const data = mockArtifactData[project].dependency_scanning;
    
    if (!parentContainer.querySelector('.project-selector')) {
        parentContainer.appendChild(createProjectSelector());
    }
    
    const content = document.createElement("div");
    content.className = "report-content";
    content.innerHTML = `
        <h2>Dependency Check Report - ${project.toUpperCase()}</h2>
        ${createSummaryCards(data.summary)}
        <div class="vulnerabilities-section">
            <h3>Vulnerabilities Found</h3>
            ${createVulnerabilityTable(data.vulnerabilities, 'Dependency Check')}
        </div>
    `;
    
    parentContainer.appendChild(content);
}

function createOverviewReportPage() {
    const main = document.querySelector("main");
    const project = getCurrentProject();
    const projectData = mockArtifactData[project];
    
    if (!main.querySelector('.project-selector')) {
        main.appendChild(createProjectSelector());
    }
    
    const content = document.createElement("div");
    content.className = "report-content overview";
    
    let overviewHTML = `<h2>Security Overview - ${project.toUpperCase()}</h2>`;
    
    // Create overview cards for each scan type
    Object.keys(projectData).forEach(scanType => {
        const data = projectData[scanType];
        const scanName = scanType.replace('_', ' ').toUpperCase();
        
        overviewHTML += `
            <div class="overview-card">
                <h3>${scanName}</h3>
                <div class="overview-summary">
                    <span class="high">High: ${data.summary.high}</span>
                    <span class="medium">Medium: ${data.summary.medium}</span>
                    <span class="low">Low: ${data.summary.low}</span>
                    <span class="total">Total: ${data.summary.total}</span>
                </div>
            </div>
        `;
    });
    
    content.innerHTML = overviewHTML;
    main.appendChild(content);
}

function createConfigPage() {
    const main = document.querySelector("main");
    main.classList.add("main-config-background");
    
    let jsonObj = {};
    
    try {
        // Try to read existing settings, fallback to defaults if not found
        const response = fetch('./VDsettings.json')
            .then(res => res.json())
            .then(data => jsonObj = data)
            .catch(() => {
                jsonObj = {
                    gitlab_instance: "lv-gitlab.intern.th-ab.de",
                    project_id: "1983",
                    private_token: "xRpjwyqZfW4YeaEUTsta",
                    stages: [
                        {"stage":"SAST","path":"example"},
                        {"stage":"Dependency check","path":""},
                        {"stage":"Container scanning","path":""},
                        {"stage":"Fuzzing","path":""},
                        {"stage":"DAST","path":""}
                    ]
                };
            });
    } catch(err) {
        removeCurrentPage();
        createErrorPage("[Error processing settings file]: \n" + err);
        return;
    }

    const content = document.createElement("div");
    content.className = "config-content";
    content.innerHTML = `
        <h2>Configuration Settings</h2>
        <form class="config-form">
            <div class="config-form-div">
                <label class="config-form-label" for="gitlab-instance">GitLab Instance</label>
                <input class="config-form-input" type="text" id="gitlab-instance" 
                       placeholder="gitlab.example.com" value="${jsonObj.gitlab_instance || ''}">
            </div>
            <div class="config-form-div">
                <label class="config-form-label" for="project-id">Project ID</label>
                <input class="config-form-input" type="number" id="project-id" 
                       placeholder="0000" value="${jsonObj.project_id || ''}">
            </div>
            <div class="config-form-div">
                <label class="config-form-label" for="private-token">Private Token</label>
                <div id="token-div">
                    <input class="config-form-input" type="password" id="private-token" 
                           value="${jsonObj.private_token || ''}">
                    <input type="checkbox" id="token-cb">
                </div>
            </div>
            <fieldset class="config-form-fieldset">
                <legend>Stages</legend>
                ${jsonObj.stages ? jsonObj.stages.map((stage, index) => `
                    <div class="config-form-div">
                        <label class="config-form-label" for="stage-${index}">${stage.stage}</label>
                        <input class="config-form-input" type="text" id="stage-${index}" 
                               placeholder="./path/to/report" value="${stage.path}">
                    </div>
                `).join('') : ''}
            </fieldset>
            <button type="button" class="config-form-btn btn-allowed">Set Configuration</button>
        </form>
    `;
    
    main.appendChild(content);
    
    // Add event listeners
    const tokenCheckbox = document.getElementById("token-cb");
    tokenCheckbox.addEventListener('change', (e) => {
        const tokenInput = document.getElementById("private-token");
        tokenInput.type = e.target.checked ? "text" : "password";
    });
    
    const configBtn = content.querySelector('.config-form-btn');
    configBtn.addEventListener('click', () => {
        // Here you would save the configuration
        alert('Configuration saved! (This is a demo - actual saving would require backend integration)');
    });
}

//EVENT LISTENERS//
btnOverview.addEventListener("click", (e) => {
    if(currentPage == OVERVIEW_PAGE) return;
    removeCurrentPage();
    createOverviewReportPage();
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    currentPage = OVERVIEW_PAGE;
});

btnSast.addEventListener("click", (e) => {
    if(currentPage == SAST_PAGE) return;
    removeCurrentPage();
    const main = document.querySelector("main");
    createSastReportPage(main);
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    currentPage = SAST_PAGE;
});

btnDCheck.addEventListener("click", (e) => {
    if(currentPage == D_CHECK_PAGE) return;
    removeCurrentPage();
    const main = document.querySelector("main");
    createDCheckReportPage(main);
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    currentPage = D_CHECK_PAGE;
});

btnContainerScanning.addEventListener("click", (e) => {
    if(currentPage == CONT_SCAN_PAGE) return;
    removeCurrentPage();
    const main = document.querySelector("main");
    createContScanReportPage(main);
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    currentPage = CONT_SCAN_PAGE;
});

btnFuzzing.addEventListener("click", (e) => {
    if(currentPage == FUZZING_PAGE) return;
    removeCurrentPage();
    const main = document.querySelector("main");
    createFuzzingReportPage(main); 
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);   
    currentPage = FUZZING_PAGE;
});

btnDast.addEventListener("click", (e) => {
    if(currentPage == DAST_PAGE) return;
    removeCurrentPage();
    const main = document.querySelector("main");
    createDastReportPage(main); 
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);   
    currentPage = DAST_PAGE;
});

btnLastPVul.addEventListener("click", (e) => {
    if(currentPage == LASTPVUL_PAGE) return;
    removeCurrentPage();
    createOverviewReportPage();
    disableReportBtns(false);
    removeSelector(BTN_ALLOWED_ACTIVE, ".");   
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    document.getElementById("overview").classList.add(BTN_ALLOWED_ACTIVE);
    currentPage = OVERVIEW_PAGE;
});

btnPreVul.addEventListener("click", (e) => {
    if(currentPage == OVERVIEW_PAGE) return;
    removeCurrentPage();
    createOverviewReportPage();
    disableReportBtns(false);
    removeSelector(BTN_ALLOWED_ACTIVE, ".");    
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    document.getElementById("overview").classList.add(BTN_ALLOWED_ACTIVE);
    currentPage = OVERVIEW_PAGE;
});

btnChConfig.addEventListener("click", (e) => {
    if(currentPage == CONFIG_PAGE) return;
    removeCurrentPage();
    createConfigPage();
    disableReportBtns(true);
    removeSelector(BTN_ALLOWED_ACTIVE, ".");   
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    currentPage = CONFIG_PAGE;
});

