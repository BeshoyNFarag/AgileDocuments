const { getData, readFile_JSON, writeFile_JSON } = require('./m_modules/utils');
const path = require(`path`);

//GLOBAL VAR//
//page enum
const BASE_PAGE = 0;
const CONFIG_PAGE = 1;
const OVERVIEW_PAGE = 2;
const SAST_PAGE = 3;
const D_CHECK_PAGE = 4;
const CONT_SCAN_PAGE = 5;
const FUZZING_PAGE = 6;
const DAST_PAGE = 7;
const LASTPVUL_PAGE = 8;
let currentPage = BASE_PAGE;
//close page enum

const SETTINGS_PATH = "./resources/VDsettings.json";
//BGD color class for main based on current page
const CONFIG_COLOR_CLASS = "main-config-background";

const BTN_ALLOWED = "btn-not-allowed";
const BTN_NOT_ALLOWED = "btn-allowed";
const BTN_ALLOWED_ACTIVE = "btn-allowed-active";

//Get buttons
const btnOverview = document.getElementById("overview");
const btnSast = document.getElementById("sast");
const btnDCheck = document.getElementById("dependenncy-check");
const btnContainerScanning = document.getElementById("container-scanning");
const btnFuzzing = document.getElementById("fuzzing");
const btnDast = document.getElementById("dast");
const btnLastPVul = document.getElementById("last-pipeline-vul");
const btnPreVul = document.getElementById("pre-vul");
const btnChConfig = document.getElementById("change-config");

//FUNCTIONS/
function createErrorPage(errorMsg) {
    const main = document.querySelector("main");
    const h1 = document.createElement("h1");
    h1.innerText = errorMsg;
    h1.style.textAlign = "center";
    main.appendChild(h1);
}

function removeCurrentPage() {
    const root = document.querySelector("main");
  
    const stack = [];
    stack.push(root);

    while(stack.length > 0) {
        while(stack.at(stack.length - 1).children.length != 0)
            stack.push(stack.at(stack.length - 1).children[0]);

        let lastNode = stack.at(stack.length - 1);
        stack.splice(stack.length - 1);
        if(stack.length > 0)
            stack.at(stack.length - 1).removeChild(lastNode);
    }
}

function disableReportBtns(disableBtn) {
    const reportBtns = document.querySelectorAll(".reportBtn");
    
    if(reportBtns[0].disabled === disableBtn) 
        return;

    for(const btn of reportBtns) {
        btn.disabled = disableBtn;
        
        btn.classList.toggle(BTN_ALLOWED);
        btn.classList.toggle(BTN_NOT_ALLOWED);
    }
}

function removeSelector(selector, type = "", ...exceptions) {
    const nodesArray = document.querySelectorAll(type + selector);
    for(const node of nodesArray) {
        if(!exceptions.includes(node))
            node.classList.remove(selector);
    }
}

function createConfigPage() {
    const main = document.querySelector("main");
    main.classList.add(CONFIG_COLOR_CLASS);
    
    let jsonObj = {};
    
    try {
        jsonObj = readFile_JSON(path.resolve(__dirname, SETTINGS_PATH));
    } catch(err) {
        removeCurrentPage();
        createErrorPage("[Error processing settings file]: \n" + err);
        return;
    }

    //create elements
    const form = document.createElement("form");
    const confirmBtn = document.createElement("button");
    const label = document.createElement("label");
    const input = document.createElement("input");
    const fieldSet = document.createElement("fieldset");
    const legend = document.createElement("legend");
    const div = document.createElement("div");
    const tokenDiv = div.cloneNode();
    let tokenCheckbox = document.createElement("input");

    //set classes and generic attributes
    form.classList.add("config-form");
    confirmBtn.classList.add("config-form-btn", BTN_ALLOWED);
    label.classList.add("config-form-label");
    input.classList.add("config-form-input");
    fieldSet.classList.add("config-form-fieldset");
    div.classList.add("config-form-div");
    tokenDiv.setAttribute("id", "token-div");
    tokenCheckbox.setAttribute("id", "token-cb");

    //form.setAttribute("method","");
    confirmBtn.setAttribute("type","button");
    //label.setAttribute("","");
    input.setAttribute("type","text");

    div.appendChild(label);
    div.appendChild(input);

    //Append children to form
    label.setAttribute("for", "0");
    label.textContent = "GitLab instance";
   
    input.setAttribute("placeholder", "gitlab.example.com");
    input.setAttribute("id", '0');
    input.setAttribute("value", jsonObj["gitlab_instance"]);

    form.appendChild(div.cloneNode(true));
    //-------------------------------------------
    label.setAttribute("for", "1");
    label.textContent = "Project Id";
   
    input.setAttribute("placeholder", "0000");
    input.setAttribute("type", "number");
    input.setAttribute("min", "0");
    input.setAttribute("minlength", "4");
    input.setAttribute("id", '1');
    input.setAttribute("value", jsonObj["project_id"]);

    form.appendChild(div.cloneNode(true));
    //-------------------------------------------
    label.setAttribute("for", "2");
    label.textContent = "Project's access token";
   
    input.removeAttribute("placeholder");
    input.removeAttribute("min");
    input.removeAttribute("minlength");
    input.setAttribute("type", "password");
    input.setAttribute("id", '2');
    input.setAttribute("value", jsonObj["private_token"]);
    tokenCheckbox.setAttribute("type", "checkbox");

    div.removeChild(input);
    div.appendChild(tokenDiv);
    tokenDiv.appendChild(input);
    tokenDiv.appendChild(tokenCheckbox);
    form.appendChild(div.cloneNode(true));

    div.removeChild(tokenDiv);
    div.appendChild(input);

    input.setAttribute("type", "text");
    //-------------------------------------------
    legend.innerText = "Stages";
    fieldSet.appendChild(legend);

    const stages = jsonObj["stages"];
    let i = 3;
    for(let stage of stages) {
        label.setAttribute("for", "0");
        label.textContent = stage["stage"];
        input.setAttribute("placeholder", "./path/to/report");
        input.setAttribute("id", i.toString());
        input.setAttribute("value", stage["path"]);
        fieldSet.appendChild(div.cloneNode(true));
        i++;
    }

    form.appendChild(fieldSet);
    //-------------------------------------------
    confirmBtn.textContent = "Set configuration";
    confirmBtn.addEventListener("click", (e) => {
        const newJsonObj = {
            gitlab_instance: document.getElementById('0').value,
            project_id: document.getElementById('1').value,
            private_token: document.getElementById('2').value,
            stages: [
                { stage: "SAST", path: document.getElementById('3').value}, 
                { stage: "Dependency check", path: document.getElementById('4').value },
                { stage: "Container scanning", path: document.getElementById('5').value },
                { stage:"Fuzzing", path: document.getElementById('6').value },
                { stage: "DAST", path: document.getElementById('7').value }
            ]
        }

        writeFile_JSON(path.resolve(__dirname, SETTINGS_PATH), newJsonObj);
    });

    form.appendChild(confirmBtn);
    main.appendChild(form);

    tokenCheckbox = document.getElementById("token-cb")
    //add event listener to hide/reveal token
    tokenCheckbox.addEventListener('change', (e) => {
        const tokenText = document.getElementById("2");
        (!e.target.checked) ? tokenText.setAttribute("type", "password") : tokenText.setAttribute("type", "text");
    });
}

function createSastReportPage(parentContainer) {
    
}

function createDastReportPage(parentContainer) {
    
}

function createFuzzingReportPage(parentContainer) {
    
}

function createContScanReportPage(parentContainer) {
    
}

function createDCheckReportPage(parentContainer) {
    
}

function createOverviewReportPage() {
    
}

//EVENTLISTENERS//
btnOverview.addEventListener("click", (e) => {
    if(currentPage == OVERVIEW_PAGE)
        return;
    removeCurrentPage();
    createOverviewReportPage();
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    //Set which page is showing and which one is not
    currentPage = OVERVIEW_PAGE;
});

btnSast.addEventListener("click", (e) => {
    if(currentPage == SAST_PAGE)
        return;
    removeCurrentPage();
    const main = document.querySelector("main");
    createSastReportPage(main);
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    //Set which page is showing and which one is not
    currentPage = SAST_PAGE;
});

btnDCheck.addEventListener("click", (e) => {
    if(currentPage == D_CHECK_PAGE)
        return;
    removeCurrentPage();
    const main = document.querySelector("main");
    createDCheckReportPage(main);
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    //Set which page is showing and which one is not
    currentPage = D_CHECK_PAGE;
});

btnContainerScanning.addEventListener("click", (e) => {
    if(currentPage == CONT_SCAN_PAGE)
        return;
    removeCurrentPage();
    const main = document.querySelector("main");
    createContScanReportPage(main);
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    //Set which page is showing and which one is not
    currentPage = CONT_SCAN_PAGE;
});

btnFuzzing.addEventListener("click", (e) => {
    if(currentPage == FUZZING_PAGE)
        return;
    removeCurrentPage();
    const main = document.querySelector("main");
    createFuzzingReportPage(main); 
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);   
    //Set which page is showing and which one is not
    currentPage = FUZZING_PAGE;
});

btnDast.addEventListener("click", (e) => {
    if(currentPage == DAST_PAGE)
        return;
    removeCurrentPage();
    const main = document.querySelector("main");
    createDastReportPage(main); 
    removeSelector(BTN_ALLOWED_ACTIVE, ".", btnLastPVul, btnPreVul);
    e.target.classList.add(BTN_ALLOWED_ACTIVE);   
    //Set which page is showing and which one is not
    currentPage = DAST_PAGE;
});

btnLastPVul.addEventListener("click", (e) => {
    if(currentPage == LASTPVUL_PAGE)
        return;
    removeCurrentPage();
    createOverviewReportPage();
    disableReportBtns(false);
    removeSelector(BTN_ALLOWED_ACTIVE, ".");   
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    document.getElementById("overview").classList.add(BTN_ALLOWED_ACTIVE);
    //Set which page is showing and which one is not
    currentPage = OVERVIEW_PAGE;
});

btnPreVul.addEventListener("click", (e) => {
    if(currentPage == OVERVIEW_PAGE)
        return;
    removeCurrentPage();
    createOverviewReportPage();
    disableReportBtns(false);
    removeSelector(BTN_ALLOWED_ACTIVE, ".");    
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    document.getElementById("overview").classList.add(BTN_ALLOWED_ACTIVE);
    //Set which page is showing and which one is not
    currentPage = OVERVIEW_PAGE;
});

btnChConfig.addEventListener("click", (e) => {
    if(currentPage == CONFIG_PAGE)
        return;
    removeCurrentPage();
    createConfigPage();
    disableReportBtns(true);
    removeSelector(BTN_ALLOWED_ACTIVE, ".");   
    e.target.classList.add(BTN_ALLOWED_ACTIVE);
    //Set which page is showing and which one is not
    currentPage = CONFIG_PAGE;
});